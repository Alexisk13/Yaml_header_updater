stages:          # List of stages for jobs, and their order of execution
  - build

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  environment: build
  tags:
    - linux
  script:
    - echo "Compiling the code..."
   #- ./pre-commit.sh
    - echo "Compile complete."
    - apt update -y
    - apt install git curl -y
    - git config --global user.name "Aleksis"
    - git config --global user.email "aleksis.kahanovskis@codex.lv"
    - |   
      echo "1 step"
      git checkout Test
      git pull --rebase
      git pull origin Test
      # echo "Current branch:"
      # git branch
      # echo "Git status:"
      # git status

      # echo "Contents of DAP directory:"
      # ls -l DAP/

      IFS=$'\n'

      # Use git ls-tree to detect all SQL files in DAP
      files=$(git ls-tree -r HEAD --name-only | grep "^DAP/.*\.sql")
      # echo "Detected SQL files in Git:"
      # echo "$files"
      # if [ -z "$files" ]; then
      #   echo "No files in DAP";
      # else
      #   echo "$files";
      # fi
        
      # ofiles=$(git ls-tree -r HEAD --name-only | grep "^DAP/.*\.sql")
      # echo "3 step"
      # date=$(date +"%d.%m.%Y %T")
      # echo "4 step"
      author="777"
      # echo "5 step"
      # updateDateFindStr="\\\$LastChangedDate[^\\$]*\\$"
      # echo "6 step"
      # updateDateReplaceStr="\\\$LastChangedDate: ${date} \\$"
      # echo "7 step"
      # updateAuthorFindStr="\\\$LastChangedBy[^\\$]*\\$"
      # updateAuthorReplaceStr="\\\$LastChangedBy: ${author} \\$"
      # echo "8 step"
      # updateVersionFindStr="\\\$LastChangedRevision:[^\\$]*\\$"
      # echo "9 step"
      # CR=$(printf '\r')
      #version=$(git rev-parse --short HEAD)
      echo "10 step"
      for file in $files
      do 
        echo "  checking file " $file

        if grep -q "\$LastChangedRevision:" "$file"; then
          if grep -qE '^-{77,}' "$file"; then

            echo "777 ss"

            VERSION=$(grep -q "\$LastChangedRevision:" "$file")
            # NEW_VERSION=$((VERSION + 1))

            echo $VERSION
            # echo $NEW_VERSION

            HEADER="-----------------------------------------------------------------------------
      -- Version
      --   \$LastChangedRevision: $NEW_VERSION \$;
      --
      -- Date
      --   \$LastChangedDate: $(date +"%Y-%m-%d %H:%M:%S %z (%a, %d %b %Y)") \$;
      --
      -- Author
      --   \$LastChangedBy: $author \$;
      --
      -----------------------------------------------------------------------------"          
            
            # echo "Deleted content from $file:"
            # sed -n '/^-\{77,\}/,/^-\{77,\}/p' "$file"

            sed -i '/^-\{77,\}/,/^-\{77,\}/d' "$file"
            
            echo -e "$HEADER\n$(cat "$file")" > temp.sql && mv temp.sql "$file"
            echo "file added" $file
          else
            echo "  Skipping $file (missing upper separator)"
            # echo $HEADER  # Header check
          fi 
        fi

          
          # check_encoding "$file"
      
          # x=$(grep -hnr '$LastChangedRevision:' $file | cut -d ' ' -f5)
          # value_count=$(echo "$x" | wc -w)

          # if [ $value_count -ge 2 ]; then
          #   sed '12,22d' $file
          #   x=$(grep -hnr '$LastChangedRevision:' $file | cut -d ' ' -f5)
          # fi
          
        #   echo $x

        #   version=$(($x+1))
        # updateVersionReplaceStr="\\\$LastChangedRevision: ${version} \\$"
        #   echo $updateVersionReplaceStr
        #   echo "11 step"
        #   sed -ri "s/$updateDateFindStr/$updateDateReplaceStr/gi; s/$updateAuthorFindStr/$updateAuthorReplaceStr/gi; s/$updateVersionFindStr/$updateVersionReplaceStr/gi;" $file
        #   git add $file
          
      done

      # for file in $ofiles 
      # do
      #     echo "12.1 step"
      #     x=$(grep -hnr '$LastChangedRevision:' $file | cut -d ' ' -f5)
      #     echo $x
      #     version=$(($x+1))
      #     echo $version
      #   updateVersionReplaceStr="\\$LastChangedRevision: ${version} \\$"
      #     echo "12 step"
      #     sed -ri "s/$updateDateFindStr/$updateDateReplaceStr/gi; s/$updateAuthorFindStr/$updateAuthorReplaceStr/gi; s/$updateVersionFindStr/$updateVersionReplaceStr/gi;" $file
      #     git add $file
      # done

      IFS=" "
      git add *
      git commit -m "Version: $NEW_VERSION " ./
       # PUSH TO TEST BRANCH
      # git push origin Test

      echo "--end--"
      # If no issues found, allow the commit
      # exit 0

