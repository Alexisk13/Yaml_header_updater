stages:          # List of stages for jobs, and their order of execution
  - build

build-job:       
  stage: build
  environment: build
  tags:
    - linux
  script:
    - echo "Compiling the code..."
   #- ./pre-commit.sh
    - echo "Compile complete."
    - apt update -y
    - apt install git curl -y
    - apt update -y
    - apt install file locales -y
    - locale-gen lv_LV.UTF-8
    - update-locale LANG=lv_LV.UTF-8
    - export LANG=lv_LV.UTF-8
    - export LC_ALL=lv_LV.UTF-8
    - locale
    - echo "✓ Latviešu UTF-8 locale strādā pareizi!"
    - echo "Fetching the latest commits..."
    - |   
      
      git fetch --all --prune
      git checkout Test
      git reset --hard origin/Test
      echo "Checking for committed files..."
      IFS=$'\n'
      
      files=$(git diff-tree --no-commit-id --name-only -r HEAD | grep '\.sql$' || true)

      if [[ -z "$files" ]]; then
        echo "No SQL files were committed. Exiting."
        exit 0
      fi

      # Debugging log
      echo "Files to process: $files"
      
      echo "10 step"

      for file in $files
      do 
        echo "Checking file: $file"
        
        committer_name=$(git log -1 --pretty=format:'%an' -- "$file")
        committer_email=$(git log -1 --pretty=format:'%ae' -- "$file")
        if [[ -n "$committer_name" && -n "$committer_email" ]]; then
          git config --local user.name "$committer_name"
          git config --local user.email "$committer_email"
          echo "Committed by: $committer_name <$committer_email>"
        else
          echo "Unable to fetch committer details. Please ensure the latest commit contains valid user info."
          exit 1
        fi
              
        # encoding=$(file -i "$file" | awk -F "=" '{print $NF}')

        # Check if file exists and is readable
        if [[ ! -f "$file" || ! -r "$file" ]]; then
          echo "Skipping file: $file (not found or not readable)"
          continue
        fi

        separator_c=$(grep -c -- "-----------------------------------------------------------------------------" $file)
        # echo "Separator count for $file: $separator_c" # debugging

        if grep -q "\$LastChangedRevision:" "$file"; then
          if [ $separator_c -eq 2 ]; then
            echo "Found two instances of 77 dashes, updating header in file: $file"

            VERSION=$(grep -hnr "\$LastChangedRevision:" "$file" | cut -d ' ' -f5)
            NEW_VERSION=$((VERSION + 1))

            HEADER="-----------------------------------------------------------------------------
      -- Version
      --   \$LastChangedRevision: $NEW_VERSION \$;
      --
      -- Date
      --   \$LastChangedDate: $(date +"%Y-%m-%d %H:%M:%S %z (%a, %d %b %Y)") \$;
      --
      -- Author
      --   \$LastChangedBy: $committer_name \$;
      --
      -----------------------------------------------------------------------------"

            sed -i '/^-\{77,\}/,/^-\{77,\}/d' "$file"
            echo -e "$HEADER\n$(cat "$file")" > temp.sql && mv temp.sql "$file"

            # export LANG=lv_LV.UTF-8
            # export LC_ALL=lv_LV.UTF-8

            # if [[ "$encoding" != "utf-8" ]]; then
            #   echo "Converting $file to UTF-8..."
            #   iconv -f "$encoding" -t UTF-8 "$file" -o temp.sql && mv temp.sql "$file" || echo "Conversion failed for $file"
            # fi

            file -i $file

            git add "$file"
            
            cat $file # Check the whole file for any errors

            git commit -m "Version: $NEW_VERSION"
            echo "Header updated and file committed: $file"
          else
            echo "Skipping file: $file (missing two instances of 77 dashes)"
          fi
        else
          echo "Skipping file: $file (missing version)"
        fi

      done

      IFS=" "
      # git add *
      
       # PUSH TO TEST BRANCH
      # git push origin Test

      echo "--end--"
